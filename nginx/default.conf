worker_processes 1;
user nobody nogroup;
error_log  /var/log/nginx/error.log crit;
pid /var/run/nginx.pid;

events {
    worker_connections 1024; # increase if you have lots of clients
    accept_mutex off; # set to 'on' if nginx worker_processes > 1
    use epoll; # The effective method, used on Linux 2.6+, optmized to serve many clients with each thread.
}

http {
    # types
    include mime.types; # fallback in case we can't determine a type
    default_type application/octet-stream;

    # Caches
    open_file_cache max=200000 inactive=20s;
    open_file_cache_valid 30s;
    open_file_cache_min_uses 2;
    open_file_cache_errors on;

    # Keep alive settings
    keepalive_timeout 30s; # Timeout for keep-alive connections. Server will close connections after this time.
    keepalive_requests 1000; # Number of requests a client can make over the keep-alive connection.

    # Proxy settings
    proxy_buffers 8 64k;
    proxy_intercept_errors on;
    proxy_connect_timeout 1m;
    proxy_read_timeout 1m;
    proxy_send_timeout 1m;
    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header X-Forwarded-Proto $scheme;
    proxy_set_header Host $http_host;
    proxy_redirect off;

    # Compression
    gzip on;
    gzip_min_length 10240;
    gzip_proxied expired no-cache no-store private auth;
    gzip_types text/plain text/css text/xml text/javascript application/x-javascript application/xml;
    gzip_disable "msie6";

    # Client timeouts
    client_body_timeout 10s; # Send the client a "request timed out" if the body is not loaded by this time.
    send_timeout 5s; # If the client stops reading data, free up the stale client connection after this much time.
    reset_timedout_connection on; # Allow the server to close the connection after a client stops responding.

    # Other
    charset utf-8;
    sendfile on;  # Sendfile copies data between one FD and other from within the kernel.
    client_max_body_size 10m;
    access_log /var/log/nginx/access.log combined;

    map $sent_http_content_type $expires {
    "text/html"                 epoch;
    "text/html; charset=utf-8"  epoch;
    default                     off;
    }



    server {
        listen 80;
        listen [::]:80;
        server_name localhost 127.0.0.1 3.18.178.22 rythmex.com www.rythmex.com;  # Please include domain

        resolver 127.0.0.11 valid=30s;
        expires $expires;

        set $client http://client:3000;
        set $backend http://backend:8000;

        location ~ /.well-known/acme-challenge {
          allow all;
          root /certbot;
        }

        location /robots.txt {
          root /code/compose/staging/nginx;
        }

        location / {
            proxy_pass $client$uri$is_args$args;
        }

       location /admin/ {
            proxy_pass $backend$uri$is_args$args;
        }

        location /api/v1/ {
            proxy_pass $backend$uri$is_args$args;
        }

        location /api-auth/ {
            proxy_pass $backend$uri$is_args$args;
        }

        location /static/ {
            alias /code/backend/public/static/;
            add_header Access-Control-Allow-Origin *;
        }

         location /media/ {
            alias /code/backend/public/media/;
            add_header Access-Control-Allow-Origin *;
        }
    }

     server {
        # default server
        listen 80 default_server;
        server_name 127.0.0.1 localhost;
        deny all;
    }
}
    listen 80 default_server;

    server_name bizon;

    location /static/ {
        alias /bizon/src/static/;
    }

    location /media/ {
        alias /bizon/src/media/;
    }

    location / {
        proxy_set_header Host $host;
        proxy_pass http://backend:8008;
    }
}